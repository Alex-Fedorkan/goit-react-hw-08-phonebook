{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/UserMenu/UserMenu.js","components/AppBar/AppBar.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","UserMenu","dispatch","useDispatch","email","useSelector","getUserEmail","Box","sx","display","alignItems","Typography","color","marginRight","Button","onClick","logOut","useStyles","makeStyles","theme","root","flexGrow","title","ApplicationBar","classes","className","AppBar","position","Container","Toolbar","variant","component","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","useForm","register","control","handleSubmit","errors","reset","s","form","onSubmit","number","find","alert","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","addContact","autoComplete","label","htmlFor","input","type","ref","required","text","defaultValue","rules","pattern","render","value","onChange","format","mask","allowEmptyFormatting","btn","ContactItem","id","deleteContact","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","list","map","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","Filter","e","changeFilter","target","ContactsView"],"mappings":"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","file":"static/js/contacts-view.b198a9a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__11B-A\",\"label\":\"ContactForm_label__1r6Mk\",\"input\":\"ContactForm_input__1hna5\",\"btn\":\"ContactForm_btn__3yYCW\",\"text\":\"ContactForm_text__1mP5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1d8wi\"};","import { useSelector, useDispatch } from 'react-redux';\r\nimport { logOut } from '../../redux/authorization/authorization-operations';\r\nimport { getUserEmail } from '../../redux/authorization/authorization-selectors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\nconst UserMenu = () => {\r\n  const dispatch = useDispatch();\r\n  const email = useSelector(getUserEmail);\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Typography color=\"textPrimary\" sx={{ marginRight: 5 }}>\r\n        {email}\r\n      </Typography>\r\n      <Button color=\"inherit\" onClick={() => dispatch(logOut())}>\r\n        Exit\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserMenu;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport UserMenu from '../UserMenu/UserMenu';\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst ApplicationBar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Container>\r\n          <Toolbar>\r\n            <Typography variant=\"h3\" className={classes.title} component=\"div\">\r\n              Contacts\r\n            </Typography>\r\n            <UserMenu />\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ApplicationBar;\r\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact?.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n","import { useForm, Controller } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport NumberFormat from 'react-number-format';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const { register, control, handleSubmit, errors, reset } = useForm();\n  const phoneRegExp = /^\\+380\\s\\(([0-9]{2})\\)\\s([0-9]{3})-([0-9]{4})$/;\n\n  const addNewContact = ({ name, number }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      reset({\n        name: '',\n        number: '',\n      });\n      return;\n    }\n    const contact = { name, number };\n    dispatch(addContact(contact));\n    reset({\n      name: '',\n      number: '',\n    });\n  };\n\n  return (\n    <form\n      className={s.form}\n      onSubmit={handleSubmit(addNewContact)}\n      autoComplete=\"off\"\n    >\n      <label className={s.label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        className={s.input}\n        name=\"name\"\n        type=\"text\"\n        ref={register({ required: true })}\n      />\n      {errors.name && <p className={s.text}>This field is required!</p>}\n\n      <label className={s.label} htmlFor=\"number\">\n        Number\n      </label>\n      <Controller\n        name=\"number\"\n        control={control}\n        defaultValue={false}\n        rules={{\n          required: true,\n          pattern: phoneRegExp,\n        }}\n        render={({ value, onChange }) => (\n          <NumberFormat\n            className={s.input}\n            type={'tel'}\n            format=\"+380 (##) ###-####\"\n            mask=\"_\"\n            allowEmptyFormatting\n            value={value}\n            onChange={onChange}\n          />\n        )}\n      />\n      {errors.number && <p className={s.text}>This field is required!</p>}\n      {errors.number?.type === 'pattern' && (\n        <p className={s.text}>Phone number is not valid!</p>\n      )}\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import axios from 'axios';\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contacts-actions';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\n\nexport const deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, deleteContact }) => {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\nimport ContactItem from './ContactItem/ContactItem';\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={id => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { Box, Container, Typography } from '@material-ui/core';\r\nimport ApplicationBar from '../components/AppBar/AppBar';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <ApplicationBar />\r\n      <Container>\r\n        <Box>\r\n          <Typography variant=\"h4\">Phonebook</Typography>\r\n          <ContactForm />\r\n          <Typography variant=\"h4\">Contacts</Typography>\r\n          <Filter />\r\n          <ContactList />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}
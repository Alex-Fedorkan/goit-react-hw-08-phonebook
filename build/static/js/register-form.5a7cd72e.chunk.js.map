{"version":3,"sources":["components/RegisterForm/RegisterForm.js"],"names":["SignUp","dispatch","useDispatch","pending","useSelector","getRegisterPending","error","getRegisterError","useForm","control","handleSubmit","reset","errors","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","m","bgcolor","variant","noValidate","width","mt","onSubmit","newUser","name","email","password","registerOperation","container","spacing","item","xs","defaultValue","rules","required","render","value","onChange","autoComplete","fullWidth","id","label","autoFocus","pattern","type","mb","disabled","size","color","justify","href","severity","open","Boolean","anchorOrigin","vertical","horizontal","autoHideDuration"],"mappings":"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","file":"static/js/register-form.5a7cd72e.chunk.js","sourcesContent":["import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register as registerOperation } from '../../redux/authorization/authorization-operations';\nimport {\n  getRegisterPending,\n  getRegisterError,\n} from '../../redux/authorization/authorization-selectors';\n\nexport default function SignUp() {\n  const dispatch = useDispatch();\n  const pending = useSelector(getRegisterPending);\n  const error = useSelector(getRegisterError);\n\n  const { control, handleSubmit, reset, errors } = useForm();\n  // eslint-disable-next-line no-useless-escape\n  const emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const registerNewUser = ({ name, email, password }) => {\n    const newUser = {\n      name,\n      email,\n      password,\n    };\n\n    dispatch(registerOperation(newUser));\n    reset({\n      name: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <Box\n          component=\"form\"\n          noValidate\n          sx={{\n            width: '100%', // Fix IE11 issue.\n            mt: 3,\n          }}\n          onSubmit={handleSubmit(registerNewUser)}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Controller\n                name=\"name\"\n                control={control}\n                defaultValue=\"\"\n                rules={{ required: true }}\n                render={({ value, onChange }) => (\n                  <TextField\n                    autoComplete=\"name\"\n                    name=\"name\"\n                    required\n                    fullWidth\n                    id=\"name\"\n                    label=\"Name\"\n                    autoFocus\n                    value={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                name=\"email\"\n                control={control}\n                defaultValue=\"\"\n                rules={{\n                  required: true,\n                  pattern: emailRegExp,\n                }}\n                render={({ value, onChange }) => (\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    value={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Controller\n                name=\"password\"\n                control={control}\n                defaultValue=\"\"\n                rules={{ required: true }}\n                render={({ value, onChange }) => (\n                  <TextField\n                    required\n                    fullWidth\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    id=\"password\"\n                    autoComplete=\"current-password\"\n                    value={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n            </Grid>\n          </Grid>\n\n          {pending ? (\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled\n            >\n              <CircularProgress size={24} />\n              <CircularProgress size={24} color=\"secondary\" />\n            </Button>\n          ) : (\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign Up\n            </Button>\n          )}\n\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n\n      {errors.name && <Alert severity=\"error\">User name is required!</Alert>}\n      {errors.email?.type === 'required' && (\n        <Alert severity=\"error\">Email Address is required!</Alert>\n      )}\n      {errors.email?.type === 'pattern' && (\n        <Alert severity=\"error\">Email Address is not valid!</Alert>\n      )}\n\n      {errors.password && <Alert severity=\"error\">Password is required!</Alert>}\n\n      {error && (\n        <Snackbar\n          open={Boolean(error)}\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          autoHideDuration={3000}\n        >\n          <Alert severity=\"error\">Something go wrong!</Alert>\n        </Snackbar>\n      )}\n    </Container>\n  );\n}\n"],"sourceRoot":""}
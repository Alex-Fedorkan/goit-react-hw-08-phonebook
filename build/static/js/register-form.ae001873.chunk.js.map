{"version":3,"sources":["components/RegisterForm/RegisterForm.js"],"names":["SignUp","dispatch","useDispatch","pending","useSelector","getRegisterPending","error","getRegisterError","useForm","control","handleSubmit","reset","errors","component","maxWidth","sx","marginTop","display","flexDirection","alignItems","m","bgcolor","variant","noValidate","width","mt","onSubmit","newUser","name","email","password","registerOperation","container","spacing","item","xs","defaultValue","rules","required","render","value","onChange","autoComplete","fullWidth","id","label","autoFocus","pattern","type","mb","disabled","size","color","justify","href","severity","open","Boolean","anchorOrigin","vertical","horizontal","autoHideDuration"],"mappings":"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","file":"static/js/register-form.ae001873.chunk.js","sourcesContent":["import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { register as registerOperation } from '../../redux/authorization/authorization-operations';\r\nimport {\r\n  getRegisterPending,\r\n  getRegisterError,\r\n} from '../../redux/authorization/authorization-selectors';\r\n\r\nexport default function SignUp() {\r\n  const dispatch = useDispatch();\r\n  const pending = useSelector(getRegisterPending);\r\n  const error = useSelector(getRegisterError);\r\n\r\n  const { control, handleSubmit, reset, errors } = useForm();\r\n  // eslint-disable-next-line no-useless-escape\r\n  const emailRegExp = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  const registerNewUser = ({ name, email, password }) => {\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password,\r\n    };\r\n\r\n    dispatch(registerOperation(newUser));\r\n    reset({\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <Box\r\n        sx={{\r\n          marginTop: 8,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <Box\r\n          component=\"form\"\r\n          noValidate\r\n          sx={{\r\n            width: '100%', // Fix IE11 issue.\r\n            mt: 3,\r\n          }}\r\n          onSubmit={handleSubmit(registerNewUser)}\r\n        >\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                name=\"name\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{ required: true }}\r\n                render={({ value, onChange }) => (\r\n                  <TextField\r\n                    autoComplete=\"name\"\r\n                    name=\"name\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"name\"\r\n                    label=\"Name\"\r\n                    autoFocus\r\n                    value={value}\r\n                    onChange={onChange}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                name=\"email\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{\r\n                  required: true,\r\n                  pattern: emailRegExp,\r\n                }}\r\n                render={({ value, onChange }) => (\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Controller\r\n                name=\"password\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{ required: true }}\r\n                render={({ value, onChange }) => (\r\n                  <TextField\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    value={value}\r\n                    onChange={onChange}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {pending ? (\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              disabled\r\n            >\r\n              <CircularProgress size={24} />\r\n              <CircularProgress size={24} color=\"secondary\" />\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n          )}\r\n\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"/login\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n\r\n      {errors.name && <Alert severity=\"error\">User name is required!</Alert>}\r\n      {errors.email?.type === 'required' && (\r\n        <Alert severity=\"error\">Email Address is required!</Alert>\r\n      )}\r\n      {errors.email?.type === 'pattern' && (\r\n        <Alert severity=\"error\">Email Address is not valid!</Alert>\r\n      )}\r\n\r\n      {errors.password && <Alert severity=\"error\">Password is required!</Alert>}\r\n\r\n      {error && (\r\n        <Snackbar\r\n          open={Boolean(error)}\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n          autoHideDuration={3000}\r\n        >\r\n          <Alert severity=\"error\">Something go wrong!</Alert>\r\n        </Snackbar>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}